

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

# synopsis {{{
# VCS segment that makes use of ZSH's vcs_info builtin autoloadable.
#
# Is async and will run vcs_info in worker process.
# }}}

# basic echo of _info_msg_0_
function zincs_vcs () {
  # _ZINC_DBG_OUT "zincs_vcs replying with: ${zincs_vcs[_info_msg_0_]}"
  REPLY="${zincs_vcs[_info_msg_0_]}"
}

[[ "${(t)zincs_vcs}" != "association" ]] && {
  typeset -gA zincs_vcs
}
zincs_vcs[_info_msg_0_]=${zincs_vcs[_info_msg_0_]:-"<async:vcs>"}
zincs_vcs[status]=${zincs_vcs[status]:-"loading"}

zincs_vcs "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function zincs_vcs_default_opts () {
  reply=(black CONDITIONAL CONDITIONAL async)
}

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function zincs_vcs_display_hidden () {
  [[ "${zincs_vcs[_info_msg_0_]}" == "" ]] && true || false
}

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function zincs_vcs_bg () {
  case "${zincs_vcs[status]}" in
    "dirty") REPLY=${zincs_vcs[color_dirty]} ;;
    "loading") REPLY=${zincs_vcs[color_loading]} ;;
    *) REPLY=${zincs_vcs[color_default]} ;;
  esac
}

# env-vars {{{
# zincs_vcs[color_dirty] -> bgcolor when repo is dirty
zincs_vcs[color_dirty]=${zincs_vcs[color_dirty]:-"yellow"}
# zincs_battery[color_loading] -> bgcolor while async process is running
zincs_vcs[color_loading]=${zincs_vcs[color_loading]:-"8"}
# zincs_vcs[color_default] -> color when repo is clean
zincs_vcs[color_default]=${zincs_vcs[color_default]:-"green"}
# }}}

zincs_vcs_bg "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT


# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

autoload -Uz vcs_info

[[ "${(t)zincs_vcs}" != "association" ]] && {
  typeset -gA zincs_vcs
}

# env-vars {{{
# zincs_vcs[backends] -> space-separated list of vcs backends; supports 'git', 'svn' and 'hg', otherwise passed to vcs_info
zincs_vcs[backends]=${zincs_vcs[backends]:-"bzr cdv cvs darcs fossil git hg mtn p4 svk svn tla"}

# zincs_vcs[vcs_icon_status_staged] -> icon for vcs staged
zincs_vcs[vcs_icon_status_staged]=${zincs_vcs[vcs_icon_status_staged]:-$'✚'} # ✚ is wide
# zincs_vcs[vcs_icon_status_unstaged] -> icon for vcs unstaged
zincs_vcs[vcs_icon_status_unstaged]=${zincs_vcs[vcs_icon_status_unstaged]:-$'●'}  # ●
# zincs_vcs[vcs_icon_status_untracked] -> icon for vcs untracked
zincs_vcs[vcs_icon_status_untracked]=${zincs_vcs[vcs_icon_status_untracked]:-$'◌'} # ◌
# zincs_vcs[vcs_icon_status_stashed] -> icon for vcs stashed
zincs_vcs[vcs_icon_status_stashed]=${zincs_vcs[vcs_icon_status_]:-$' ⋄'} # ⋄
# zincs_vcs[vcs_icon_status_ahead] -> icon for vcs commit ahead
zincs_vcs[vcs_icon_status_ahead]=${zincs_vcs[vcs_icon_status_ahead]:-'+'}
# zincs_vcs[vcs_icon_status_behind] -> icon for vcs commit behind
zincs_vcs[vcs_icon_status_behind]=${zincs_vcs[vcs_icon_status_behind]:-'-'}
# }}}

zincs_vcs_async() {
  local -a backends=(${(z)zincs_vcs[backends]})
  # if git backend and gitstatus exists:
  # (( ${backends[(I)git]} )) && (( ${+functions[gitstatus_check]} )) &&
  if (( ${+functions[gitstatus_check]} )) && (( ${backends[(I)git]} )) && gitstatus_check ZINC &&
    gitstatus_query -t 30 ZINC && [[ "$VCS_STATUS_RESULT" == "ok-sync" ]]; then
    zincs_vcs_async_gitstatus
  elif (( #backends )); then
    zstyle ':vcs_info:*' enable ${backends}
    vcs_info
    printf '%b' "${VCS_WORKDIR_DIRTY},vcs_info;;;${vcs_info_msg_0_}"
    return 0
  fi
}

zincs_vcs_async_gitstatus_start_worker () {
  if (( ${+functions[gitstatus_start]} )); then
    # _ZINC_DBG_OUT starting zinc gitstatus worker
    # try to start a worker?
    gitstatus_start ZINC
    # gitstatus_check ZINC
  fi
}
zincs_vcs_async_gitstatus_start_worker

zincs_vcs_async_gitstatus () {
  # _ZINC_DBG_OUT "vcs using gitstatus vars: $VCS_STATUS_ALL"
  # Fast path: use vcs info provided by gitstatus.
  echo -nE "$((VCS_STATUS_HAS_STAGED || VCS_STATUS_HAS_UNSTAGED)),gitstatus;;;"
  [[ -n "$VCS_STATUS_LOCAL_BRANCH" ]] && {
    echo -nE "$VCS_STATUS_LOCAL_BRANCH"
  } || [[ -n "$VCS_STATUS_TAG" ]] && {
    echo -nE ""
  } || {
    echo -nE "$(git rev-parse --short HEAD)"
  }
  [[ -n "$VCS_STATUS_ACTION" ]] && {
    echo -nE "%F{${red}}| $VCS_STATUS_ACTION%f"
  } || {
    # If local and remote branch names differ, show "local→remote" instead of just "local".
    [[ -z "$VCS_STATUS_REMOTE_BRANCH" ]] ||
      [[ "$VCS_STATUS_LOCAL_BRANCH" == "$VCS_STATUS_REMOTE_BRANCH" ]] ||
      echo -nE $'→'"$VCS_STATUS_REMOTE_BRANCH"
    local icons=''
    (( VCS_STATUS_HAS_STAGED != 1 )) || icons+="${zincs_vcs[vcs_icon_status_staged]}"
    (( VCS_STATUS_HAS_UNSTAGED != 1 )) || icons+="${zincs_vcs[vcs_icon_status_unstaged]}"
    (( VCS_STATUS_HAS_UNTRACKED != 1 )) || icons+="${zincs_vcs[vcs_icon_status_untracked]}"
    echo -nE "${icons:+$icons}"
    (( VCS_STATUS_COMMITS_AHEAD <= 0 )) || echo -nE " ${zincs_vcs[vcs_icon_status_ahead]}$VCS_STATUS_COMMITS_AHEAD"
    (( VCS_STATUS_COMMITS_BEHIND <= 0 )) || echo -nE " ${zincs_vcs[vcs_icon_status_behind]}$VCS_STATUS_COMMITS_BEHIND"
    (( VCS_STATUS_STASHES <= 0 )) || echo -nE "${zincs_vcs[vcs_icon_status_stashed]}""$VCS_STATUS_STASHES"
    # Prompt example with all optional parts present:
    #
    #   feature→master✚●◌ +1 -2 ⋄3
    #
    # We are on branch "feature" that tracks "origin/master". We have staged, unstaged and
    # untracked files. We are 1 commit ahead and 2 commits behind. We have 3 stashes.
  }
}

# HACK/TODO ex. from my personal shell
zstyle ':vcs_info:svn*:*' actionformats '%c%u %F{red}| %a%f'
zstyle ':vcs_info:*' actionformats '%b %F{red}| %a%f'
zstyle ':vcs_info:hg*:*' branchformat '%b'
zstyle ':vcs_info:*' check-for-changes true
# zstyle ':vcs_info:svn*:*' formats %c%u # causing blank status
zstyle ':vcs_info:*' formats %b%c%u%m
zstyle ':vcs_info:hg*:*' get-bookmarks true
zstyle ':vcs_info:hg*:*' get-revision true
zstyle ':vcs_info:hg*+gen-hg-bookmark-string:*' hooks hg-bookmarks
zstyle ':vcs_info:*' stagedstr "${zincs_vcs[vcs_icon_status_staged]}"
zstyle ':vcs_info:*' unstagedstr "${zincs_vcs[vcs_icon_status_unstaged]}"

# VCS_INFO HOOKS
zstyle ':vcs_info:git*+set-message:*' hooks \n  vcs-detect-changes git-untracked git-aheadbehind
zstyle ':vcs_info:hg*+set-message:*' hooks \n  vcs-detect-changes hg-branchhead
zstyle ':vcs_info:svn*+set-message:*' hooks \n  vcs-detect-changes svn-detect-changes

### Generic hook functions
function +vi-vcs-detect-changes() {
  if [[ -n "${hook_com[staged]}" ]] || [[ -n "${hook_com[unstaged]}" ]]; then
    VCS_WORKDIR_DIRTY=1
  else
    VCS_WORKDIR_DIRTY=0
  fi
}

### GIT hook functions

function +vi-git-untracked(){
  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \n    git status --porcelain | grep '??' &> /dev/null ; then
    # This will show the marker if there are any untracked files in repo.
    # If instead you want to show the marker only if there are untracked
    # files in $PWD, use:
    #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
    hook_com[unstaged]+="${zincs_vcs[vcs_icon_status_untracked]}"
  fi
}

function +vi-git-aheadbehind() {
  local ahead behind
  local -a gitstatus

  # for git prior to 1.7
  # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
  ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
  (( $ahead )) && gitstatus+=( " ${zincs_vcs[vcs_icon_status_ahead]}${ahead}" )

  # for git prior to 1.7
  # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
  behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
  (( $behind )) && gitstatus+=( " ${zincs_vcs[vcs_icon_status_behind]}${behind}" )

  hook_com[misc]+=${(j::)gitstatus}
}

### HG hook functions

function +vi-hg-branchhead() {
  local branchheadsfile i_tiphash i_branchname
  local -a branchheads

  local branchheadsfile=${hook_com[base]}/.hg/branchheads.cache

  # Bail out if any mq patches are applied
  [[ -s ${hook_com[base]}/.hg/patches/status ]] && return 0

  if [[ -r ${branchheadsfile} ]] ; then
    while read -r i_tiphash i_branchname ; do
      branchheads+=( $i_tiphash )
    done < ${branchheadsfile}

    if [[ ! ${branchheads[(i)${user_data[hash]}]} -le ${#branchheads} ]] ; then
      hook_com[revision]="^ ${hook_com[revision]}"
    fi
  fi
}

# SVN hook functions

function +vi-svn-detect-changes() {
  declare -a svn_status
  svn_status=( "${(@f)$(svn status)}" )
  if [[ "${(M)#svn_status:#?*}" -gt 0 ]]; then
    hook_com[unstaged]+="${zincs_vcs[vcs_icon_status_untracked]}"
    VCS_WORKDIR_HALF_DIRTY=1
  fi
  if [[ "${(M)#svn_status:#M*}" -gt 0 ]]; then
    hook_com[unstaged]+="${zincs_vcs[vcs_icon_status_unstaged]}"
    VCS_WORKDIR_DIRTY=1
  fi
  if [[ "${(M)#svn_status:#A*}" -gt 0 ]]; then
    hook_com[staged]+="${zincs_vcs[vcs_icon_status_staged]}"
    VCS_WORKDIR_DIRTY=1
  fi
}

### Definitions done

zincs_vcs_async "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

zincs_vcs_async_return ()
{
  # $1 return code
  # $2 resulting (stdout) output from job execution
  # $3 execution time, floating point e.g. 0.0076138973 seconds
  # $4 resulting (stderr) error output from job execution

  _ZINC_DBG_OUT "zincs_vcs working out input: $2"
  local -a tmp
  tmp=("${(s.;;;.)2}")
  zincs_vcs[_info_msg_0_]="${tmp[2]}"
  zincs_vcs[_debug_backend_response]="${tmp[1]}"
  tmp=("${(s.,.)tmp}")
  (( ${tmp[1]} )) && zincs_vcs[status]="dirty" || zincs_vcs[status]="returned"
}

zincs_vcs_async_return "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

zincs_vcs_async_started ()
{
  # _ZINC_DBG_OUT "zincs_vcs_async_started called..."
  # _display_hidden is hooked on the empty scalar:
  zincs_vcs[_info_msg_0_]="${zincs_vcs[loading_msg]}"
  zincs_vcs[status]="loading"
}

[[ "${(t)zincs_vcs}" != "association" ]] && {
  typeset -gA zincs_vcs
}
# env-vars {{{
# zincs_vcs[loading_msg] -> message while waiting for async process
# (set to blank string to hide the segment during async wait)
zincs_vcs[loading_msg]=${zincs_vcs[loading_msg]:-"<loading...>"}
# }}}

# resets the async status when done with renders
function _zincs_vcs_async_complete () {
  _zinc_segment_async_reset_status zincs_vcs
}

-zinc-add-hook _zinc_async_complete _zincs_vcs_async_complete

zincs_vcs_async_started "$@"

# AUTOGENERATED - DO NOT EDIT
